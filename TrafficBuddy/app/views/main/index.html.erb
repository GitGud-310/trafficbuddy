<div id="map-canvas">
</div>

<%= javascript_tag do %>
    var events_latlons = [];
    <% TrafficEvent.all.each do |t| %>
        var latlons = [];
        <% LatLon.where(traffic_event: t).each do |l| %>
            var latlon = new google.maps.LatLng(<%= l.latitude  %>, <%= l.longitude %>);
            latlons.push(latlon);
        <%end%>
        events_latlons.push(latlons);
    <%end%>

    var events_titles = [];
    <% TrafficEvent.all.each do |t| %>
        events_titles.push("<%= t.title %>");
    <%end%>
<% end %>

<script>
    var default_lat = 49.2598379;
    var default_lng = -123.2459363;
    var mapOptions = {
        center: new google.maps.LatLng(default_lat, default_lng),
        zoom: 12
    };

    var map = new google.maps.Map(document.getElementById("map-canvas"), mapOptions);
    var marker;
    var openWindow;
    var markers = [];

    function centerMap(latLng) {
        map.panTo(latLng);
        if (marker) {
            marker.setMap(null);
            marker = null;
        }
        marker = new google.maps.Marker({
            map: map,
            animation: google.maps.Animation.DROP,
            position: latLng
        });
    }

    function geolocate() {
        utils.geolocate(function(position) {
            var latLng = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
            centerMap(latLng);
        });
    }

    function processForm(e) {
        e.preventDefault();
        utils.geocode($('#new_location').val(), function(results) {
            var latLng = new google.maps.LatLng(results[0].geometry.location.lat(), results[0].geometry.location.lng());
            centerMap(latLng);
        });
        $('#modal2').closeModal();
        return false;
    }

    function performSearch(e) {
        e.preventDefault();
        return false;
    }



    function mapLayer(map) {
        var trafficLayer = new google.maps.TrafficLayer();
        trafficLayer.setMap(map);

        for (i=0; i < events_latlons.length; i++) {

            var lat_lon1 = events_latlons[i][0];
            var lat_lon2 = events_latlons[i][events_latlons[i].length - 1];

            putIcon(lat_lon1, events_titles[i], map);
            putIcon(lat_lon2, events_titles[i], map);

        }
    }

    function putIcon(lat_lon, title, map) {
        var marker = new google.maps.Marker({
            position: lat_lon,
            map: map
        });

        google.maps.event.addListener(marker, 'click', function() {
            if (openWindow)
                openWindow.close();

            openWindow =  new google.maps.InfoWindow({content: title});
            openWindow.open(map,marker);
        });

        google.maps.event.addListener(map, 'click', function() {
            if (openWindow)
                openWindow.close();
            openWindow = null;
        });

        google.maps.event.addListener(map, 'drag', function() {
            if (openWindow)
                openWindow.close();
            openWindow = null;
        });
    }

    function initialize() {
        // Create the search box and link it to the UI element.
        var input = /** @type {HTMLInputElement} */(
                document.getElementById('search-query'));

        var searchBox = new google.maps.places.SearchBox(
                /** @type {HTMLInputElement} */(input));

        // [START region_getplaces]
        // Listen for the event fired when the user selects an item from the
        // pick list. Retrieve the matching places for that item.
        google.maps.event.addListener(searchBox, 'places_changed', function() {
            var places = searchBox.getPlaces();

            if (places.length == 0) {
                return;
            }
            for (var i = 0, marker; marker = markers[i]; i++) {
                marker.setMap(null);
            }

            // For each place, get the icon, place name, and location.
            markers = [];
            var bounds = new google.maps.LatLngBounds();
            for (var i = 0, place; place = places[i]; i++) {

                // Create a marker for each place.
                // uncomment for specialized markers
                var marker = new google.maps.Marker({
                    map: map,
                    title: place.name,
                    position: place.geometry.location,
                    animation: google.maps.Animation.DROP
                });

                markers.push(marker);

                bounds.extend(place.geometry.location);
            }

            map.fitBounds(bounds);
        });
        // [END region_getplaces]

        // Bias the SearchBox results towards places that are within the bounds of the
        // current map's viewport.
        google.maps.event.addListener(map, 'bounds_changed', function() {
            var bounds = map.getBounds();
            searchBox.setBounds(bounds);
        });
    }

    mapLayer(map);


    document.getElementById('search-field').addEventListener('submit', performSearch);
    document.getElementById('location-form').addEventListener('submit', processForm);
    document.getElementById('location-submit').addEventListener('click', processForm);
    google.maps.event.addDomListener(window, 'load', initialize);
    $('.traffic-card').click(centerMapCardClick);

    function centerMapCardClick(e) {
        map.panTo(new google.maps.LatLng($(this).data('lat'), $(this).data('lon')));
        map.setZoom(17);
    }
</script>
